Tokens:

INT → /* A sequence of digits without spaces */

FLOAT → /* A real number consisting of digits and one decimal point. The decimal point must be surrounded by at least one digit */

ID → /* A character string consisting of 52 upper- or lower-case alphabetic, 10 numeric and one underscore characters. Besides, an identifier must not start with a digit */

SEMI → ;

COMMA → ,

ASSIGNOP → =

RELOP → > | < | >= | <= | == | !=

PLUS → +

MINUS → -

STAR → *

DIV → /

AND → &&

OR → ||

DOT → .

NOT → !

TYPE → int | float

LP → (

RP → )

LB → [

RB → ]

LC → {

RC → }

STRUCT → struct

RETURN → return

IF → if

ELSE → else

WHILE → while



文法:

Program → ExtDefList



ExtDefList → ExtDef ExtDefList

| 



ExtDef → Specifier ExtDecList SEMI

| Specifier SEMI

| Specifier FunDec CompSt



ExtDecList → VarDec

| VarDec COMMA ExtDecList




Specifier → TYPE

| StructSpecifier



StructSpecifier → STRUCT OptTag LC DefList RC

| STRUCT Tag



OptTag → ID

| 



Tag → ID




VarDec → ID

| VarDec LB INT RB



FunDec → ID LP VarList RP

| ID LP RP



VarList → ParamDec COMMA VarList

| ParamDec



ParamDec → Specifier VarDec




CompSt → LC DefList StmtList RC



StmtList → Stmt StmtList

| 



Stmt → Exp SEMI

| CompSt

| RETURN Exp SEMI

| IF LP Exp RP Stmt

| IF LP Exp RP Stmt ELSE Stmt

| WHILE LP Exp RP Stmt




DefList → Def DefList

| 



Def → Specifier DecList SEMI



DecList → Dec

| Dec COMMA DecList



Dec → VarDec

| VarDec ASSIGNOP Exp




Exp → Exp ASSIGNOP Exp

| Exp AND Exp

| Exp OR Exp

| Exp RELOP Exp

| Exp PLUS Exp

| Exp MINUS Exp

| Exp STAR Exp

| Exp DIV Exp

| LP Exp RP

| MINUS Exp

| NOT Exp

| ID LP Args RP

| ID LP RP

| Exp LB Exp RB

| Exp DOT ID

| ID

| INT

| FLOAT



Args → Exp COMMA Args

| Exp
